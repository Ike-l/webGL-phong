const vertexShaderText = `
  precision mediump float;
  
  attribute vec3 vertPosition;
  attribute vec3 vertNormal;
  attribute vec3 vertColor;

  varying vec3 fragColor;
  varying vec3 fragNormal;
  varying vec3 fragPosition;
  
  uniform mat4 mWorld;
  
  uniform mat4 mView;
  
  uniform mat4 mProj;
  
  uniform mat4 mNormal;

  void main() {
    gl_Position = mProj * mView * mWorld * vec4(vertPosition, 1.0);

    //highp vec3 ambientLight = normalize(vec3(1.0, 1.0, 1.0));
    //highp vec3 directionalLightColor = vec3(1, 1, 1);
    //highp vec3 directionalVector = normalize(vec3(0.85, 0.8, 0.75));
    //highp vec4 transformedNormal = mNormal * vec4(vertNormal, 1.0);
    //highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);
    //vLighting = ambientLight + (directionalLightColor * directional);
    
    fragColor = vertColor;
    //fragNormal = mat3(mNormal) * vertNormal;
    fragNormal = vertNormal;
    //fragPosition = vec3(mWorld * vec4(vertPosition, 1.0));
    fragPosition = vertPosition;
  }
`

const fragmentShaderText = `
  precision mediump float;

  varying vec3 fragColor;
  varying vec3 fragNormal;
  varying vec3 fragPosition;

  uniform vec3 Ambient;
  uniform vec3 Diffuse;
  uniform vec3 Specular;
  uniform vec3 Emissive;
  uniform float Shiny;
  uniform float Opacity;

  #define MAX_LIGHTS 10

  uniform vec3 lightPositions[MAX_LIGHTS];
  uniform vec3 lightColors[MAX_LIGHTS];
  uniform float lightIntensities[MAX_LIGHTS];
  
  uniform vec3 cameraPosition;

  void main() {
    vec3 result = vec3(0.0);
    float ambientStrength = 0.1;
    float specularStrength = 1.0;
    vec3 norm = normalize(fragNormal);
    for (int i = 0; i < MAX_LIGHTS; i++) {
        vec3 ambient = ambientStrength * lightColors[i];
        vec3 ambientColor = ambient * fragColor;
        vec3 lightDir = normalize(lightPositions[i] - fragPosition);
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diff * lightColors[i];

        vec3 viewDir = normalize(cameraPosition - fragPosition);
        vec3 reflectDir = reflect(-lightDir, norm);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), Shiny);
        vec3 specular = specularStrength * spec * lightColors[i];
        
        result += (ambient + diffuse + specular) * fragColor;
    }
    gl_FragColor = vec4(result, 1.0);
  }
`